
uniform mat4 uMatrix;
uniform mat4 uMatrixShadow;

attribute vec3 aPosition;
attribute vec3 aNormal;
attribute vec2 aTexCoord;

varying vec3 vInv;
varying vec3 vNormal;
varying vec2 vUV;

void main(){
    gl_Position = uMatrix * vec4(aPosition.xyz, 1.0);
    vInv = (uMatrixShadow * vec4(aPosition.xyz, 1.0)).xyz;
    vNormal = aNormal;
    vUV = aTexCoord;
}

[FRAGMENT]

uniform vec3 uLightDirection;
uniform float uEps;
uniform vec3 uAmbient;
uniform vec3 uDiffuse;

uniform sampler2D uDepthMap;
uniform sampler2D uTexture;

varying vec3 vInv;
varying vec3 vNormal;
varying vec2 vUV;

float unpack(vec4 c){
    return dot(c, vec4(1.0, 1.0/255.0, 1.0/(255.0*255.0), 1.0/(255.0*255.0*255.0)));
}

void main(){
    float nn = -dot(vNormal, uLightDirection);
    vec3 baseColor = texture2D(uTexture, vUV).xyz;
    if (nn <= 0.0){
       gl_FragColor = vec4((baseColor * uAmbient).xyz, 1.0);
       return;
    }
    float delta = - vInv.z + uEps + unpack(texture2D(uDepthMap, vInv.xy));
    if (delta < 0.0){
        gl_FragColor = vec4((baseColor * uAmbient).xyz, 1.0);
    } else {
        gl_FragColor = vec4((baseColor * (uAmbient + nn*uDiffuse)).xyz, 1.0);
    }
}