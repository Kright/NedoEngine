
uniform mat4 uMatrix;
uniform mat4 uMatrixShadow;

attribute vec3 aPosition;
attribute vec3 aNormal;

varying vec4 vInv;
varying vec3 vNormal;
varying float vH;

void main(){
    gl_Position = uMatrix * vec4(aPosition.xyz, 1.0);
    vInv.xyz = (uMatrixShadow * vec4(aPosition.xyz, 1.0)).xyz;
    vNormal = aNormal;
    if (abs(vInv.x)>1.0 || abs(vInv.y)>1.0){
        vNormal.z = -1.0;
    }
    vInv.xy = (vInv.xy*0.5+vec2(0.5, 0.5));
    vInv.z = vInv.z*0.5+0.5;
    vInv.w = aPosition.z*0.001;
}

[FRAGMENT]

uniform vec4 uColorAmbient;
uniform vec4 uColorDiffuse;
uniform vec3 uLightDirection;
uniform float uEps;
uniform sampler2D uDepthMap;

varying vec4 vInv;
varying vec3 vNormal;

float unpack(vec4 c){
    return dot(c, vec4(1.0, 1.0/255.0, 1.0/(255.0*255.0), 1.0/(255.0*255.0*255.0)));
}

void main(){
float nn = -dot(vNormal, uLightDirection);
    if (nn <= 0.0){
        gl_FragColor = uColorAmbient*(1.0+vInv.w);
        return;
    }
    float delta = - vInv.z + uEps + unpack(texture2D(uDepthMap, vInv.xy));

    delta *= 1000.0;

    if (abs(delta)>1.0){
        gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);
        return;
    }
    if (delta>0.0){
        gl_FragColor = vec4(delta, 0.0, 0.0, 1.0);
    } else if (delta < 0.0){
        gl_FragColor = vec4(0.0, 0.0, -delta, 1.0);
    } else {
        gl_FragColor = uColorAmbient*(1.0+vInv.w) + uColorDiffuse * nn;
    }
}